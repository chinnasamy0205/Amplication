/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHmProtestAccountArgs } from "./CreateHmProtestAccountArgs";
import { UpdateHmProtestAccountArgs } from "./UpdateHmProtestAccountArgs";
import { DeleteHmProtestAccountArgs } from "./DeleteHmProtestAccountArgs";
import { HmProtestAccountFindManyArgs } from "./HmProtestAccountFindManyArgs";
import { HmProtestAccountFindUniqueArgs } from "./HmProtestAccountFindUniqueArgs";
import { HmProtestAccount } from "./HmProtestAccount";
import { HmProtestAccountUserFindManyArgs } from "../../hmProtestAccountUser/base/HmProtestAccountUserFindManyArgs";
import { HmProtestAccountUser } from "../../hmProtestAccountUser/base/HmProtestAccountUser";
import { HmProtestProjectFindManyArgs } from "../../hmProtestProject/base/HmProtestProjectFindManyArgs";
import { HmProtestProject } from "../../hmProtestProject/base/HmProtestProject";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { HmProtestAccountService } from "../hmProtestAccount.service";

@graphql.Resolver(() => HmProtestAccount)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HmProtestAccountResolverBase {
  constructor(
    protected readonly service: HmProtestAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "read",
    possession: "any",
  })
  async _hmProtestAccountsMeta(
    @graphql.Args() args: HmProtestAccountFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HmProtestAccount])
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "read",
    possession: "any",
  })
  async hmProtestAccounts(
    @graphql.Args() args: HmProtestAccountFindManyArgs
  ): Promise<HmProtestAccount[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HmProtestAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "read",
    possession: "own",
  })
  async hmProtestAccount(
    @graphql.Args() args: HmProtestAccountFindUniqueArgs
  ): Promise<HmProtestAccount | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HmProtestAccount)
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "create",
    possession: "any",
  })
  async createHmProtestAccount(
    @graphql.Args() args: CreateHmProtestAccountArgs
  ): Promise<HmProtestAccount> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HmProtestAccount)
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "update",
    possession: "any",
  })
  async updateHmProtestAccount(
    @graphql.Args() args: UpdateHmProtestAccountArgs
  ): Promise<HmProtestAccount | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HmProtestAccount)
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "delete",
    possession: "any",
  })
  async deleteHmProtestAccount(
    @graphql.Args() args: DeleteHmProtestAccountArgs
  ): Promise<HmProtestAccount | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestAccountUser])
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccountUser",
    action: "read",
    possession: "any",
  })
  async hmProtestAccountUsers(
    @graphql.Parent() parent: HmProtestAccount,
    @graphql.Args() args: HmProtestAccountUserFindManyArgs
  ): Promise<HmProtestAccountUser[]> {
    const results = await this.service.findHmProtestAccountUsers(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestProject])
  @nestAccessControl.UseRoles({
    resource: "HmProtestProject",
    action: "read",
    possession: "any",
  })
  async hmProtestProjects(
    @graphql.Parent() parent: HmProtestAccount,
    @graphql.Args() args: HmProtestProjectFindManyArgs
  ): Promise<HmProtestProject[]> {
    const results = await this.service.findHmProtestProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: HmProtestAccount,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
