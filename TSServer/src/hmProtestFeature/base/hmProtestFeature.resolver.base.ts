/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHmProtestFeatureArgs } from "./CreateHmProtestFeatureArgs";
import { UpdateHmProtestFeatureArgs } from "./UpdateHmProtestFeatureArgs";
import { DeleteHmProtestFeatureArgs } from "./DeleteHmProtestFeatureArgs";
import { HmProtestFeatureFindManyArgs } from "./HmProtestFeatureFindManyArgs";
import { HmProtestFeatureFindUniqueArgs } from "./HmProtestFeatureFindUniqueArgs";
import { HmProtestFeature } from "./HmProtestFeature";
import { HmProtestRequirementFindManyArgs } from "../../hmProtestRequirement/base/HmProtestRequirementFindManyArgs";
import { HmProtestRequirement } from "../../hmProtestRequirement/base/HmProtestRequirement";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { HmProtestFeatureService } from "../hmProtestFeature.service";

@graphql.Resolver(() => HmProtestFeature)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HmProtestFeatureResolverBase {
  constructor(
    protected readonly service: HmProtestFeatureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "read",
    possession: "any",
  })
  async _hmProtestFeaturesMeta(
    @graphql.Args() args: HmProtestFeatureFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HmProtestFeature])
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "read",
    possession: "any",
  })
  async hmProtestFeatures(
    @graphql.Args() args: HmProtestFeatureFindManyArgs
  ): Promise<HmProtestFeature[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HmProtestFeature, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "read",
    possession: "own",
  })
  async hmProtestFeature(
    @graphql.Args() args: HmProtestFeatureFindUniqueArgs
  ): Promise<HmProtestFeature | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HmProtestFeature)
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "create",
    possession: "any",
  })
  async createHmProtestFeature(
    @graphql.Args() args: CreateHmProtestFeatureArgs
  ): Promise<HmProtestFeature> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HmProtestFeature)
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "update",
    possession: "any",
  })
  async updateHmProtestFeature(
    @graphql.Args() args: UpdateHmProtestFeatureArgs
  ): Promise<HmProtestFeature | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HmProtestFeature)
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "delete",
    possession: "any",
  })
  async deleteHmProtestFeature(
    @graphql.Args() args: DeleteHmProtestFeatureArgs
  ): Promise<HmProtestFeature | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestRequirement])
  @nestAccessControl.UseRoles({
    resource: "HmProtestRequirement",
    action: "read",
    possession: "any",
  })
  async hmProtestRequirements(
    @graphql.Parent() parent: HmProtestFeature,
    @graphql.Args() args: HmProtestRequirementFindManyArgs
  ): Promise<HmProtestRequirement[]> {
    const results = await this.service.findHmProtestRequirements(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: HmProtestFeature,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
