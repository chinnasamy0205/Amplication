/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsString,
  IsOptional,
  ValidateNested,
  IsJSON,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { HmProtestAccount } from "../../hmProtestAccount/base/HmProtestAccount";
import { HmProtestAccountUser } from "../../hmProtestAccountUser/base/HmProtestAccountUser";
import { HmProtestFeature } from "../../hmProtestFeature/base/HmProtestFeature";
import { HmProtestProject } from "../../hmProtestProject/base/HmProtestProject";
import { HmProtestRequirement } from "../../hmProtestRequirement/base/HmProtestRequirement";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { EnumUserUserPlan } from "./EnumUserUserPlan";
import { EnumUserUserStatus } from "./EnumUserUserStatus";
@ObjectType()
class User {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName!: string | null;

  @ApiProperty({
    required: false,
    type: () => [HmProtestAccount],
  })
  @ValidateNested()
  @Type(() => HmProtestAccount)
  @IsOptional()
  hmProtestAccounts?: Array<HmProtestAccount>;

  @ApiProperty({
    required: false,
    type: () => HmProtestAccountUser,
  })
  @ValidateNested()
  @Type(() => HmProtestAccountUser)
  @IsOptional()
  hmProtestAccountUser?: HmProtestAccountUser | null;

  @ApiProperty({
    required: false,
    type: () => HmProtestFeature,
  })
  @ValidateNested()
  @Type(() => HmProtestFeature)
  @IsOptional()
  hmProtestFeature?: HmProtestFeature | null;

  @ApiProperty({
    required: false,
    type: () => [HmProtestProject],
  })
  @ValidateNested()
  @Type(() => HmProtestProject)
  @IsOptional()
  hmProtestProjects?: Array<HmProtestProject>;

  @ApiProperty({
    required: false,
    type: () => [HmProtestRequirement],
  })
  @ValidateNested()
  @Type(() => HmProtestRequirement)
  @IsOptional()
  hmProtestRequirements?: Array<HmProtestRequirement>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSON()
  @Field(() => GraphQLJSON)
  roles!: JsonValue;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  userDesc!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  userEndDate!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;

  @ApiProperty({
    required: false,
    enum: EnumUserUserPlan,
  })
  @IsEnum(EnumUserUserPlan)
  @IsOptional()
  @Field(() => EnumUserUserPlan, {
    nullable: true,
  })
  userPlan?: "Basic" | "Full" | "Free" | null;

  @ApiProperty({
    required: false,
    enum: EnumUserUserStatus,
  })
  @IsEnum(EnumUserUserStatus)
  @IsOptional()
  @Field(() => EnumUserUserStatus, {
    nullable: true,
  })
  userStatus?: "Active" | "InActive" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  userStDate!: Date | null;
}
export { User };
