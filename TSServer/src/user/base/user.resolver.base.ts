/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { HmProtestAccountFindManyArgs } from "../../hmProtestAccount/base/HmProtestAccountFindManyArgs";
import { HmProtestAccount } from "../../hmProtestAccount/base/HmProtestAccount";
import { HmProtestProjectFindManyArgs } from "../../hmProtestProject/base/HmProtestProjectFindManyArgs";
import { HmProtestProject } from "../../hmProtestProject/base/HmProtestProject";
import { HmProtestRequirementFindManyArgs } from "../../hmProtestRequirement/base/HmProtestRequirementFindManyArgs";
import { HmProtestRequirement } from "../../hmProtestRequirement/base/HmProtestRequirement";
import { HmProtestAccountUser } from "../../hmProtestAccountUser/base/HmProtestAccountUser";
import { HmProtestFeature } from "../../hmProtestFeature/base/HmProtestFeature";
import { UserService } from "../user.service";

@graphql.Resolver(() => User)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UserResolverBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async _usersMeta(
    @graphql.Args() args: UserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  async createUser(@graphql.Args() args: CreateUserArgs): Promise<User> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        hmProtestAccountUser: args.data.hmProtestAccountUser
          ? {
              connect: args.data.hmProtestAccountUser,
            }
          : undefined,

        hmProtestFeature: args.data.hmProtestFeature
          ? {
              connect: args.data.hmProtestFeature,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUser(@graphql.Args() args: UpdateUserArgs): Promise<User | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          hmProtestAccountUser: args.data.hmProtestAccountUser
            ? {
                connect: args.data.hmProtestAccountUser,
              }
            : undefined,

          hmProtestFeature: args.data.hmProtestFeature
            ? {
                connect: args.data.hmProtestFeature,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestAccount])
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccount",
    action: "read",
    possession: "any",
  })
  async hmProtestAccounts(
    @graphql.Parent() parent: User,
    @graphql.Args() args: HmProtestAccountFindManyArgs
  ): Promise<HmProtestAccount[]> {
    const results = await this.service.findHmProtestAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestProject])
  @nestAccessControl.UseRoles({
    resource: "HmProtestProject",
    action: "read",
    possession: "any",
  })
  async hmProtestProjects(
    @graphql.Parent() parent: User,
    @graphql.Args() args: HmProtestProjectFindManyArgs
  ): Promise<HmProtestProject[]> {
    const results = await this.service.findHmProtestProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [HmProtestRequirement])
  @nestAccessControl.UseRoles({
    resource: "HmProtestRequirement",
    action: "read",
    possession: "any",
  })
  async hmProtestRequirements(
    @graphql.Parent() parent: User,
    @graphql.Args() args: HmProtestRequirementFindManyArgs
  ): Promise<HmProtestRequirement[]> {
    const results = await this.service.findHmProtestRequirements(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => HmProtestAccountUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HmProtestAccountUser",
    action: "read",
    possession: "any",
  })
  async hmProtestAccountUser(
    @graphql.Parent() parent: User
  ): Promise<HmProtestAccountUser | null> {
    const result = await this.service.getHmProtestAccountUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => HmProtestFeature, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HmProtestFeature",
    action: "read",
    possession: "any",
  })
  async hmProtestFeature(
    @graphql.Parent() parent: User
  ): Promise<HmProtestFeature | null> {
    const result = await this.service.getHmProtestFeature(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
