/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCategorymgtArgs } from "./CreateCategorymgtArgs";
import { UpdateCategorymgtArgs } from "./UpdateCategorymgtArgs";
import { DeleteCategorymgtArgs } from "./DeleteCategorymgtArgs";
import { CategorymgtFindManyArgs } from "./CategorymgtFindManyArgs";
import { CategorymgtFindUniqueArgs } from "./CategorymgtFindUniqueArgs";
import { Categorymgt } from "./Categorymgt";
import { CategorymgtService } from "../categorymgt.service";

@graphql.Resolver(() => Categorymgt)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CategorymgtResolverBase {
  constructor(
    protected readonly service: CategorymgtService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "read",
    possession: "any",
  })
  async _categorymgtsMeta(
    @graphql.Args() args: CategorymgtFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Categorymgt])
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "read",
    possession: "any",
  })
  async categorymgts(
    @graphql.Args() args: CategorymgtFindManyArgs
  ): Promise<Categorymgt[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Categorymgt, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "read",
    possession: "own",
  })
  async categorymgt(
    @graphql.Args() args: CategorymgtFindUniqueArgs
  ): Promise<Categorymgt | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categorymgt)
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "create",
    possession: "any",
  })
  async createCategorymgt(
    @graphql.Args() args: CreateCategorymgtArgs
  ): Promise<Categorymgt> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categorymgt)
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "update",
    possession: "any",
  })
  async updateCategorymgt(
    @graphql.Args() args: UpdateCategorymgtArgs
  ): Promise<Categorymgt | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Categorymgt)
  @nestAccessControl.UseRoles({
    resource: "Categorymgt",
    action: "delete",
    possession: "any",
  })
  async deleteCategorymgt(
    @graphql.Args() args: DeleteCategorymgtArgs
  ): Promise<Categorymgt | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
