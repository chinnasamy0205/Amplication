datasource mysql {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt              DateTime            @default(now())
  firstName              String?
  hmProtestAccounts      Account[]
  hmProtestAccountUser   AccountUser?        @relation(fields: [hmProtestAccountUserId], references: [id])
  hmProtestAccountUserId String?
  hmProtestFeature       Feature?            @relation(fields: [hmProtestFeatureId], references: [id])
  hmProtestFeatureId     String?
  hmProtestProjects      Project[]
  hmProtestRequirements  Requirement[]
  id                     String              @id @default(cuid())
  lastName               String?
  password               String
  roles                  Json
  updatedAt              DateTime            @updatedAt
  userDesc               String?
  userEndDate            DateTime?
  username               String              @unique
  userPlan               EnumUserUserPlan?
  userStatus             EnumUserUserStatus?
  userStDate             DateTime?
}

model Account {
  accountBdm            String?
  accountDesc           String?
  accountDm             String?
  accountEndDate        DateTime?
  accountId             String?
  accountName           String
  accountPm             String?
  accountStatus         EnumAccountAccountStatus?
  accountStDate         DateTime
  createdAt             DateTime                  @default(now())
  hmProtestAccountUsers AccountUser[]
  hmProtestProjects     Project[]
  id                    String                    @id @default(cuid())
  updatedAt             DateTime                  @updatedAt
  userId                User[]
}

model Project {
  accountId      Account[]
  createdAt      DateTime  @default(now())
  id             String    @id @default(cuid())
  projectDesc    String?
  projectEndDate DateTime?
  projectId      String?
  projectName    String?
  projectStDate  DateTime?
  updatedAt      DateTime  @updatedAt
  userId         User[]
}

model Feature {
  createdAt             DateTime      @default(now())
  featureDesc           String?
  featureEndDate        DateTime?
  featureId             String
  featureName           String
  featurePrereq         String?
  featureProjId         String?
  featureStDate         DateTime
  hmProtestRequirements Requirement[]
  id                    String        @id @default(cuid())
  updatedAt             DateTime      @updatedAt
  userId                User[]
}

model Requirement {
  createdAt    DateTime               @default(now())
  id           String                 @id @default(cuid())
  modelChanged Int?
  reqDesc      String?
  reqFeatureId Feature[]
  reqId        String?
  reqModelname String?
  reqModelpath String?
  reqName      String?
  reqPrereq    String?
  reqType      String?
  status       EnumRequirementStatus?
  updatedAt    DateTime               @updatedAt
  userId       User[]
}

model AccountUser {
  accountId       Account[]
  createdAt       DateTime  @default(now())
  id              String    @id @default(cuid())
  updatedAt       DateTime  @updatedAt
  userAccountRole Int?
  userId          User[]
}

enum EnumUserUserPlan {
  Basic
  Full
  Free
}

enum EnumUserUserStatus {
  Active
  InActive
}

enum EnumAccountAccountStatus {
  Active
  InActive
}

enum EnumRequirementStatus {
  Active
  InActive
}
