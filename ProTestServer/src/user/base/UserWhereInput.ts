/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { AccountListRelationFilter } from "../../account/base/AccountListRelationFilter";
import { AccountUserWhereUniqueInput } from "../../accountUser/base/AccountUserWhereUniqueInput";
import { FeatureWhereUniqueInput } from "../../feature/base/FeatureWhereUniqueInput";
import { ProjectListRelationFilter } from "../../project/base/ProjectListRelationFilter";
import { RequirementListRelationFilter } from "../../requirement/base/RequirementListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumUserUserPlan } from "./EnumUserUserPlan";
import { EnumUserUserStatus } from "./EnumUserUserStatus";
@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountListRelationFilter)
  @IsOptional()
  @Field(() => AccountListRelationFilter, {
    nullable: true,
  })
  hmProtestAccounts?: AccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AccountUserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AccountUserWhereUniqueInput)
  @IsOptional()
  @Field(() => AccountUserWhereUniqueInput, {
    nullable: true,
  })
  hmProtestAccountUser?: AccountUserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => FeatureWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FeatureWhereUniqueInput)
  @IsOptional()
  @Field(() => FeatureWhereUniqueInput, {
    nullable: true,
  })
  hmProtestFeature?: FeatureWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ProjectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProjectListRelationFilter)
  @IsOptional()
  @Field(() => ProjectListRelationFilter, {
    nullable: true,
  })
  hmProtestProjects?: ProjectListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RequirementListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RequirementListRelationFilter)
  @IsOptional()
  @Field(() => RequirementListRelationFilter, {
    nullable: true,
  })
  hmProtestRequirements?: RequirementListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  userDesc?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  userEndDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserUserPlan,
  })
  @IsEnum(EnumUserUserPlan)
  @IsOptional()
  @Field(() => EnumUserUserPlan, {
    nullable: true,
  })
  userPlan?: "Basic" | "Full" | "Free";

  @ApiProperty({
    required: false,
    enum: EnumUserUserStatus,
  })
  @IsEnum(EnumUserUserStatus)
  @IsOptional()
  @Field(() => EnumUserUserStatus, {
    nullable: true,
  })
  userStatus?: "Active" | "InActive";

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  userStDate?: DateTimeNullableFilter;
}
export { UserWhereInput };
