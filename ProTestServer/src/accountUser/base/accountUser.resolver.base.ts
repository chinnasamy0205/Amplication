/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAccountUserArgs } from "./CreateAccountUserArgs";
import { UpdateAccountUserArgs } from "./UpdateAccountUserArgs";
import { DeleteAccountUserArgs } from "./DeleteAccountUserArgs";
import { AccountUserFindManyArgs } from "./AccountUserFindManyArgs";
import { AccountUserFindUniqueArgs } from "./AccountUserFindUniqueArgs";
import { AccountUser } from "./AccountUser";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { AccountUserService } from "../accountUser.service";

@graphql.Resolver(() => AccountUser)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AccountUserResolverBase {
  constructor(
    protected readonly service: AccountUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "read",
    possession: "any",
  })
  async _accountUsersMeta(
    @graphql.Args() args: AccountUserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountUser])
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "read",
    possession: "any",
  })
  async accountUsers(
    @graphql.Args() args: AccountUserFindManyArgs
  ): Promise<AccountUser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "read",
    possession: "own",
  })
  async accountUser(
    @graphql.Args() args: AccountUserFindUniqueArgs
  ): Promise<AccountUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountUser)
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "create",
    possession: "any",
  })
  async createAccountUser(
    @graphql.Args() args: CreateAccountUserArgs
  ): Promise<AccountUser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountUser)
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "update",
    possession: "any",
  })
  async updateAccountUser(
    @graphql.Args() args: UpdateAccountUserArgs
  ): Promise<AccountUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountUser)
  @nestAccessControl.UseRoles({
    resource: "AccountUser",
    action: "delete",
    possession: "any",
  })
  async deleteAccountUser(
    @graphql.Args() args: DeleteAccountUserArgs
  ): Promise<AccountUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account])
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async accountId(
    @graphql.Parent() parent: AccountUser,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccountId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: AccountUser,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
