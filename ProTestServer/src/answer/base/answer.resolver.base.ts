/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAnswerArgs } from "./CreateAnswerArgs";
import { UpdateAnswerArgs } from "./UpdateAnswerArgs";
import { DeleteAnswerArgs } from "./DeleteAnswerArgs";
import { AnswerFindManyArgs } from "./AnswerFindManyArgs";
import { AnswerFindUniqueArgs } from "./AnswerFindUniqueArgs";
import { Answer } from "./Answer";
import { AnswerService } from "../answer.service";

@graphql.Resolver(() => Answer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AnswerResolverBase {
  constructor(
    protected readonly service: AnswerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "any",
  })
  async _answersMeta(
    @graphql.Args() args: AnswerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Answer])
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "any",
  })
  async answers(@graphql.Args() args: AnswerFindManyArgs): Promise<Answer[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Answer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "own",
  })
  async answer(
    @graphql.Args() args: AnswerFindUniqueArgs
  ): Promise<Answer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Answer)
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "create",
    possession: "any",
  })
  async createAnswer(@graphql.Args() args: CreateAnswerArgs): Promise<Answer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Answer)
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "update",
    possession: "any",
  })
  async updateAnswer(
    @graphql.Args() args: UpdateAnswerArgs
  ): Promise<Answer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Answer)
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "delete",
    possession: "any",
  })
  async deleteAnswer(
    @graphql.Args() args: DeleteAnswerArgs
  ): Promise<Answer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
