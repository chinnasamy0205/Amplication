/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFeatureArgs } from "./CreateFeatureArgs";
import { UpdateFeatureArgs } from "./UpdateFeatureArgs";
import { DeleteFeatureArgs } from "./DeleteFeatureArgs";
import { FeatureFindManyArgs } from "./FeatureFindManyArgs";
import { FeatureFindUniqueArgs } from "./FeatureFindUniqueArgs";
import { Feature } from "./Feature";
import { RequirementFindManyArgs } from "../../requirement/base/RequirementFindManyArgs";
import { Requirement } from "../../requirement/base/Requirement";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { FeatureService } from "../feature.service";

@graphql.Resolver(() => Feature)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FeatureResolverBase {
  constructor(
    protected readonly service: FeatureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "read",
    possession: "any",
  })
  async _featuresMeta(
    @graphql.Args() args: FeatureFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Feature])
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "read",
    possession: "any",
  })
  async features(
    @graphql.Args() args: FeatureFindManyArgs
  ): Promise<Feature[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Feature, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "read",
    possession: "own",
  })
  async feature(
    @graphql.Args() args: FeatureFindUniqueArgs
  ): Promise<Feature | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Feature)
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "create",
    possession: "any",
  })
  async createFeature(
    @graphql.Args() args: CreateFeatureArgs
  ): Promise<Feature> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Feature)
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "update",
    possession: "any",
  })
  async updateFeature(
    @graphql.Args() args: UpdateFeatureArgs
  ): Promise<Feature | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Feature)
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "delete",
    possession: "any",
  })
  async deleteFeature(
    @graphql.Args() args: DeleteFeatureArgs
  ): Promise<Feature | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Requirement])
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "read",
    possession: "any",
  })
  async hmProtestRequirements(
    @graphql.Parent() parent: Feature,
    @graphql.Args() args: RequirementFindManyArgs
  ): Promise<Requirement[]> {
    const results = await this.service.findHmProtestRequirements(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: Feature,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
