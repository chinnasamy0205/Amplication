/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumAccountAccountStatus } from "./EnumAccountAccountStatus";
import { AccountUserCreateNestedManyWithoutAccountsInput } from "./AccountUserCreateNestedManyWithoutAccountsInput";
import { ProjectCreateNestedManyWithoutAccountsInput } from "./ProjectCreateNestedManyWithoutAccountsInput";
import { UserCreateNestedManyWithoutAccountsInput } from "./UserCreateNestedManyWithoutAccountsInput";
@InputType()
class AccountCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountBdm?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountDesc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountDm?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  accountEndDate?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountId?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  accountName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountPm?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumAccountAccountStatus,
  })
  @IsEnum(EnumAccountAccountStatus)
  @IsOptional()
  @Field(() => EnumAccountAccountStatus, {
    nullable: true,
  })
  accountStatus?: "Active" | "InActive" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  accountStDate!: Date;

  @ApiProperty({
    required: false,
    type: () => AccountUserCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => AccountUserCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => AccountUserCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  hmProtestAccountUsers?: AccountUserCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProjectCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProjectCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProjectCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  hmProtestProjects?: ProjectCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => UserCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => UserCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => UserCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  userId?: UserCreateNestedManyWithoutAccountsInput;
}
export { AccountCreateInput };
