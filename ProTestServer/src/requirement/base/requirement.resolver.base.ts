/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRequirementArgs } from "./CreateRequirementArgs";
import { UpdateRequirementArgs } from "./UpdateRequirementArgs";
import { DeleteRequirementArgs } from "./DeleteRequirementArgs";
import { RequirementFindManyArgs } from "./RequirementFindManyArgs";
import { RequirementFindUniqueArgs } from "./RequirementFindUniqueArgs";
import { Requirement } from "./Requirement";
import { FeatureFindManyArgs } from "../../feature/base/FeatureFindManyArgs";
import { Feature } from "../../feature/base/Feature";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { RequirementService } from "../requirement.service";

@graphql.Resolver(() => Requirement)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RequirementResolverBase {
  constructor(
    protected readonly service: RequirementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "read",
    possession: "any",
  })
  async _requirementsMeta(
    @graphql.Args() args: RequirementFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Requirement])
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "read",
    possession: "any",
  })
  async requirements(
    @graphql.Args() args: RequirementFindManyArgs
  ): Promise<Requirement[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Requirement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "read",
    possession: "own",
  })
  async requirement(
    @graphql.Args() args: RequirementFindUniqueArgs
  ): Promise<Requirement | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Requirement)
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "create",
    possession: "any",
  })
  async createRequirement(
    @graphql.Args() args: CreateRequirementArgs
  ): Promise<Requirement> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Requirement)
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "update",
    possession: "any",
  })
  async updateRequirement(
    @graphql.Args() args: UpdateRequirementArgs
  ): Promise<Requirement | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Requirement)
  @nestAccessControl.UseRoles({
    resource: "Requirement",
    action: "delete",
    possession: "any",
  })
  async deleteRequirement(
    @graphql.Args() args: DeleteRequirementArgs
  ): Promise<Requirement | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Feature])
  @nestAccessControl.UseRoles({
    resource: "Feature",
    action: "read",
    possession: "any",
  })
  async reqFeatureId(
    @graphql.Parent() parent: Requirement,
    @graphql.Args() args: FeatureFindManyArgs
  ): Promise<Feature[]> {
    const results = await this.service.findReqFeatureId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async userId(
    @graphql.Parent() parent: Requirement,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUserId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
